pipeline {
    agent any
    tools {
        jdk   'jdk17'
        maven 'maven3'
    }

    environment {
        IMAGE_NAME       = 'marmevladek/devopsl-notification'
        DOCKER_HUB_USER  = credentials('DOCKER_HUB_USERNAME')
        DOCKER_HUB_TOKEN = credentials('DOCKER_HUB_TOKEN')
    }

    stages {

        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build (skip tests)') {
            steps {
                dir('notification-service') {
                    sh 'mvn clean install -DskipTests'
                }
            }
        }

        stage('Test') {
            steps {
                dir('notification-service') {
                    sh 'mvn test'
                }
            }
            post {
                always { junit 'notification-service/target/surefire-reports/*.xml' }
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                script {
                    def platforms = ['linux/amd64', 'linux/arm64']

                    // Логин в Docker Hub
                    sh "echo ${DOCKER_HUB_TOKEN} | docker login -u ${DOCKER_HUB_USER} --password-stdin"

                    // Инициализация buildx (разово)
                    sh '''
                        docker buildx create --use --name mybuilder || true
                        docker buildx inspect mybuilder --bootstrap
                    '''

                    // Сборка и пуш образа
                    sh """
                        docker buildx build \
                          --platform ${platforms.join(',')} \
                          --file ./notification-service/Dockerfile \
                          --tag ${IMAGE_NAME}:latest \
                          --push ./notification-service
                    """
                }
            }
        }

        stage('Deploy to Minikube') {
            environment {
                IMAGE_NAME = 'marmevladek/devopsl-notification:latest'
            }
            steps {
                script {
                    def KUBECONFIG = "/var/lib/jenkins/.kube/config"

                    // Проверка наличия kubeconfig
                    sh "ls -la ${KUBECONFIG} || true"

                    // Проверка соединения с кластером
                    sh """
                        echo "=== Проверяем соединение с кластером ==="
                        kubectl --kubeconfig=${KUBECONFIG} cluster-info
                        kubectl --kubeconfig=${KUBECONFIG} get nodes
                    """

                    // Обновляем образ в Deployment notification-service
                    sh """
                        echo "=== Обновляем образ в Deployment ==="
                        kubectl --kubeconfig=${KUBECONFIG} set image deployment/notification-service notification-service=${IMAGE_NAME} --record
                    """

                    // Ждем окончания раскатки
                    sh """
                        echo "=== Ожидаем завершения rollout ==="
                        kubectl --kubeconfig=${KUBECONFIG} rollout status deployment/notification-service --timeout=120s || true
                    """
                }
            }
        }
    }
}
